{
  "name": "array-buffers",
  "version": "0.0.12",
  "description": "Treat a collection of ArrayBuffers as a single contiguous ArrayBuffer.",
  "main": "index.js",
  "dependencies": {
    "to-utf8": "~0.0.1"
  },
  "devDependencies": {
    "tape": "~1.1.0"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "keywords": [
    "array",
    "buffer",
    "ArrayBuffer",
    "ArrayBuffers",
    "TypedArray"
  ],
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/10..latest",
      "chrome/20..latest",
      "firefox/18..latest",
      "safari/latest",
      "opera/11.0..latest",
      "iphone/6",
      "ipad/6"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ttaubert/node-array-buffers.git"
  },
  "homepage": "https://github.com/ttaubert/node-array-buffers",
  "author": {
    "name": "Tim Taubert",
    "email": "tim@timtaubert.de",
    "url": "http://timtaubert.de/"
  },
  "license": "MIT",
  "readme": "# array-buffers\n\nTreat a collection of ArrayBuffers as a single contiguous ArrayBuffer.\n\n[![browser support](http://ci.testling.com/ttaubert/node-array-buffers.png)](http://ci.testling.com/ttaubert/node-array-buffers)\n\n[![build status](https://secure.travis-ci.org/ttaubert/node-array-buffers.png)](http://travis-ci.org/ttaubert/node-array-buffers)\n\nThis module is a clone of\n[buffers](https://github.com/substack/node-buffers).\nIt uses the same API but works with ArrayBuffers, only.\nIt is supposed to be used in browsers and bundled using\n[browserify](https://github.com/substack/node-browserify).\n\nThere's nothing wrong with using it for ArrayBuffers in node as well...\n\n# examples\n\n## slice\n\n    function createBuffer(elems) {\n      var array = new Uint8Array(new ArrayBuffer(elems.length));\n      elems.forEach(function (elem, i) { array[i] = elem });\n      return array.buffer;\n    }\n\n    var ArrayBuffers = require(\"array-buffers\");\n    var bufs = ArrayBuffers();\n    bufs.push(createBuffer([1,2,3]));\n    bufs.push(createBuffer([4,5,6,7]));\n    bufs.push(createBuffer([8,9,10]));\n\n    console.dir(bufs.slice(2,8));\n\noutput:\n\n    $ node examples/slice.js\n    <ArrayBuffer 03 04 05 06 07 08>\n\n## splice\n\n    function createBuffer(elems) {\n      var array = new Uint8Array(new ArrayBuffer(elems.length));\n      elems.forEach(function (elem, i) { array[i] = elem });\n      return array.buffer;\n    }\n\n    var ArrayBuffers = require(\"array-buffers\");\n    var bufs = ArrayBuffers();\n    bufs.push(createBuffer([1,2,3]));\n    bufs.push(createBuffer([4,5,6,7]));\n    bufs.push(createBuffer([8,9,10]));\n\n    var removed = bufs.splice(2, 4);\n    console.log(removed.slice());\n    console.log(bufs.slice());\n\noutput:\n\n    $ node examples/splice.js\n    <ArrayBuffer 03 04 05 06>\n    <ArrayBuffer 01 02 07 08 09 0a>\n\n# methods\n\nArrayBuffers(buffers)\n----------------\n\nCreate an ArrayBuffers with an array of `ArrayBuffer`s if specified, else `[]`.\n\n.push(buf1, buf2...)\n--------------------\n\nPush buffers onto the end. Just like `Array.prototype.push`.\n\n.unshift(buf1, buf2...)\n-----------------------\n\nUnshift buffers onto the head. Just like `Array.prototype.unshift`.\n\n.slice(i, j)\n------------\n\nSlice a range out of the buffer collection as if it were contiguous.\nWorks just like the `Array.prototype.slice` version.\n\n.splice(i, howMany, replacements)\n---------------------------------\n\nSplice the buffer collection as if it were contiguous.\nWorks just like `Array.prototype.splice`, even the replacement part!\n\n.copy(dst, dstStart, start, end)\n--------------------------------\n\nCopy the buffer collection as if it were contiguous to the `dst` ArrayBuffer\nwith the specified bounds.\n\n.get(i)\n-------\n\nGet a single element at index `i`.\n\n.set(i, x)\n----------\n\nSet a single element's value at index `i`.\n\n.indexOf(needle, offset)\n----------\n\nFind a string or buffer `needle` inside the buffer collection. Returns\nthe position of the search string or -1 if the search string was not\nfound.\n\nProvide an `offset` to skip that number of characters at the beginning\nof the search. This can be used to find additional matches.\n\nThis function will return the correct result even if the search string\nis spread out over multiple internal buffers.\n\n.toBuffer()\n-----------\n\nConvert the buffer collection to a single buffer, equivalent with `.slice(0, buffers.length)`\n\n.toString(encoding, start, end)\n-----------\n\nDecodes and returns a string from the buffer collection.\nWorks just like `Buffer.prototype.toString`\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install array-buffers\n```\n\n# license\n\nMIT\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ttaubert/node-array-buffers/issues"
  },
  "_id": "array-buffers@0.0.12",
  "dist": {
    "shasum": "1e3ed1d0da22a7df600888cfdb600bd2c60f90e8"
  },
  "_from": "array-buffers@",
  "_resolved": "https://registry.npmjs.org/array-buffers/-/array-buffers-0.0.12.tgz"
}
